1
00:00:06,970 --> 00:00:10,050
[Music]

2
00:00:12,940 --> 00:00:16,060
[Music]

3
00:00:19,520 --> 00:00:26,399
[Music]

4
00:00:36,000 --> 00:00:39,000
so

5
00:00:49,440 --> 00:00:52,079
hello welcome to a new episode of our

6
00:00:52,079 --> 00:00:54,640
mbsd podcast

7
00:00:54,640 --> 00:00:57,039
the interoperability of engineering

8
00:00:57,039 --> 00:00:59,680
tools is well it's really a hot topic

9
00:00:59,680 --> 00:01:02,640
now we want to break up the data silos

10
00:01:02,640 --> 00:01:04,799
where the data of the tools is often

11
00:01:04,799 --> 00:01:05,760
hidden

12
00:01:05,760 --> 00:01:07,920
and there's hardly any engineering

13
00:01:07,920 --> 00:01:10,560
project that does not have this as a

14
00:01:10,560 --> 00:01:11,680
challenge

15
00:01:11,680 --> 00:01:14,240
a good reason for us to look at the data

16
00:01:14,240 --> 00:01:16,880
integration standard oslc and our guest

17
00:01:16,880 --> 00:01:19,600
axelrify the ceo of connexus a company

18
00:01:19,600 --> 00:01:22,320
that is all about linking data

19
00:01:22,320 --> 00:01:25,200
so axel welcome and please introduce

20
00:01:25,200 --> 00:01:26,720
yourself

21
00:01:26,720 --> 00:01:28,320
hello tim thank you very much for the

22
00:01:28,320 --> 00:01:31,759
invitation so my name is axel reichwein

23
00:01:31,759 --> 00:01:34,720
uh i'm originally an aerospace engineer

24
00:01:34,720 --> 00:01:37,280
i studied at the university of stuttgart

25
00:01:37,280 --> 00:01:39,680
and towards the end of my studies i was

26
00:01:39,680 --> 00:01:41,920
lucky to be able to work on more exotic

27
00:01:41,920 --> 00:01:42,960
topics

28
00:01:42,960 --> 00:01:44,960
exotic from the perspective of aerospace

29
00:01:44,960 --> 00:01:46,079
engineering

30
00:01:46,079 --> 00:01:49,119
so i worked on

31
00:01:49,119 --> 00:01:51,600
neural net neural networks

32
00:01:51,600 --> 00:01:53,520
reinforcement learning

33
00:01:53,520 --> 00:01:56,799
and also then in 2005 i looked at the

34
00:01:56,799 --> 00:01:58,799
system's modern language

35
00:01:58,799 --> 00:02:00,640
and at that time no

36
00:02:00,640 --> 00:02:02,960
you know i think i was among the first

37
00:02:02,960 --> 00:02:05,439
to really

38
00:02:05,680 --> 00:02:07,840
discover this and i was very passionate

39
00:02:07,840 --> 00:02:10,318
about this i managed to convince my phd

40
00:02:10,318 --> 00:02:12,959
advisor dr stefan rudolph

41
00:02:12,959 --> 00:02:15,440
that i should work with it

42
00:02:15,440 --> 00:02:16,319
and

43
00:02:16,319 --> 00:02:18,239
but systeml was still evolving so i

44
00:02:18,239 --> 00:02:20,319
decided during my phd thesis to work

45
00:02:20,319 --> 00:02:22,000
with a unified modern language which

46
00:02:22,000 --> 00:02:23,280
shares a lot of concepts with the

47
00:02:23,280 --> 00:02:25,840
systems modeling language

48
00:02:25,840 --> 00:02:27,760
and then

49
00:02:27,760 --> 00:02:29,680
a professor at georgia tech dr chris

50
00:02:29,680 --> 00:02:30,879
paredes

51
00:02:30,879 --> 00:02:33,680
he invited me to do a postdoc at georgia

52
00:02:33,680 --> 00:02:35,840
tech where i could continue what i was

53
00:02:35,840 --> 00:02:36,720
doing

54
00:02:36,720 --> 00:02:39,120
but with the system's only language

55
00:02:39,120 --> 00:02:40,959
and i'll i'll quickly say what i was

56
00:02:40,959 --> 00:02:44,160
doing bring my phd and my postdoc

57
00:02:44,160 --> 00:02:46,640
i was actually trying to find out

58
00:02:46,640 --> 00:02:49,200
what would be a good system architecture

59
00:02:49,200 --> 00:02:50,720
modeling language

60
00:02:50,720 --> 00:02:52,000
to describe

61
00:02:52,000 --> 00:02:54,720
dependencies between engineering models

62
00:02:54,720 --> 00:02:57,599
so i was looking at the systems modeling

63
00:02:57,599 --> 00:02:58,959
language or the unified modeling

64
00:02:58,959 --> 00:03:00,000
language

65
00:03:00,000 --> 00:03:02,319
not just to describe a system at an

66
00:03:02,319 --> 00:03:05,200
abstract level but to capture all these

67
00:03:05,200 --> 00:03:06,959
dependencies that exist between the more

68
00:03:06,959 --> 00:03:09,680
detailed discipline specific models such

69
00:03:09,680 --> 00:03:11,120
as between a

70
00:03:11,120 --> 00:03:13,920
simulation model and a 3d model

71
00:03:13,920 --> 00:03:15,519
and

72
00:03:15,519 --> 00:03:19,840
or among different simulation models and

73
00:03:19,840 --> 00:03:22,400
the idea was that

74
00:03:22,400 --> 00:03:25,200
in order to

75
00:03:25,200 --> 00:03:27,200
perform trade-off studies

76
00:03:27,200 --> 00:03:29,599
we would just need to reconfigure the

77
00:03:29,599 --> 00:03:32,239
system model and then that these changes

78
00:03:32,239 --> 00:03:34,720
would be reflected automatically to the

79
00:03:34,720 --> 00:03:37,519
more uh domain specific models

80
00:03:37,519 --> 00:03:38,319
um

81
00:03:38,319 --> 00:03:40,239
and um

82
00:03:40,239 --> 00:03:42,080
so i looked into that for quite a few

83
00:03:42,080 --> 00:03:43,040
years

84
00:03:43,040 --> 00:03:46,480
then in 2012 i stopped my post doc

85
00:03:46,480 --> 00:03:48,400
and roger borchardt

86
00:03:48,400 --> 00:03:50,239
who was working at john deere

87
00:03:50,239 --> 00:03:52,879
gave me the opportunity as a as a

88
00:03:52,879 --> 00:03:54,159
consultant

89
00:03:54,159 --> 00:03:55,599
to

90
00:03:55,599 --> 00:03:59,120
work on a project that required oslc

91
00:03:59,120 --> 00:04:01,599
and so i had to learn what what oslc

92
00:04:01,599 --> 00:04:03,680
means uh what open services for

93
00:04:03,680 --> 00:04:06,159
lifecycle collaboration stands for

94
00:04:06,159 --> 00:04:08,720
and and since then i've been you know

95
00:04:08,720 --> 00:04:11,360
very passionate about it and uh yeah

96
00:04:11,360 --> 00:04:13,519
that's my brief history

97
00:04:13,519 --> 00:04:14,959
okay

98
00:04:14,959 --> 00:04:16,720
very interesting

99
00:04:16,720 --> 00:04:19,440
uh yeah excellent also from my side very

100
00:04:19,440 --> 00:04:21,600
warm welcome nice to have you here nice

101
00:04:21,600 --> 00:04:24,000
to see you after all these years

102
00:04:24,000 --> 00:04:27,440
uh we met sometimes but uh yeah in the

103
00:04:27,440 --> 00:04:30,880
last two years yeah we had contact uh

104
00:04:30,880 --> 00:04:34,320
in in in the word sense um we will talk

105
00:04:34,320 --> 00:04:36,960
about that later on and

106
00:04:36,960 --> 00:04:39,919
um yeah

107
00:04:40,320 --> 00:04:42,240
like tim already said we are talking

108
00:04:42,240 --> 00:04:44,400
about oslc we are talking about data

109
00:04:44,400 --> 00:04:47,680
integration and um

110
00:04:47,680 --> 00:04:51,440
maybe one more question ahead of all so

111
00:04:51,440 --> 00:04:52,960
what is the main difference for you

112
00:04:52,960 --> 00:04:54,960
between data integration and data

113
00:04:54,960 --> 00:04:58,720
exchange so what makes oslc special

114
00:04:58,720 --> 00:05:01,520
yes that's a good question so

115
00:05:01,520 --> 00:05:02,919
i often hear the keyword

116
00:05:02,919 --> 00:05:04,479
interoperability

117
00:05:04,479 --> 00:05:06,080
and then i think of data exchange

118
00:05:06,080 --> 00:05:08,479
between two different applications

119
00:05:08,479 --> 00:05:09,199
so

120
00:05:09,199 --> 00:05:12,560
where one application exports data

121
00:05:12,560 --> 00:05:14,800
and that is then imported by the other

122
00:05:14,800 --> 00:05:15,919
application

123
00:05:15,919 --> 00:05:18,800
and this exchange of data is without

124
00:05:18,800 --> 00:05:20,960
information loss ideally

125
00:05:20,960 --> 00:05:22,840
and this is what i understand as

126
00:05:22,840 --> 00:05:25,840
interoperability between applications

127
00:05:25,840 --> 00:05:28,639
and this has been performed for

128
00:05:28,639 --> 00:05:31,919
decades now we've got all kinds of

129
00:05:31,919 --> 00:05:34,479
data exchange formats

130
00:05:34,479 --> 00:05:36,080
there are still ongoing efforts of

131
00:05:36,080 --> 00:05:38,479
course to improve them

132
00:05:38,479 --> 00:05:40,560
but

133
00:05:40,560 --> 00:05:43,039
it's there's a big difference i think

134
00:05:43,039 --> 00:05:45,199
between interoperability

135
00:05:45,199 --> 00:05:47,759
and connectivity

136
00:05:47,759 --> 00:05:48,479
so

137
00:05:48,479 --> 00:05:51,360
you mentioned data integration

138
00:05:51,360 --> 00:05:54,080
just like data interoperability i think

139
00:05:54,080 --> 00:05:55,280
i i

140
00:05:55,280 --> 00:05:57,280
i think of data exchange

141
00:05:57,280 --> 00:05:59,039
and um

142
00:05:59,039 --> 00:06:00,560
and you mentioned data integration then

143
00:06:00,560 --> 00:06:03,039
i think of data connectivity

144
00:06:03,039 --> 00:06:03,919
and

145
00:06:03,919 --> 00:06:06,960
it's really i think right now

146
00:06:06,960 --> 00:06:09,120
important

147
00:06:09,120 --> 00:06:11,840
to not just copy data around across

148
00:06:11,840 --> 00:06:13,680
applications yeah i think this is the

149
00:06:13,680 --> 00:06:16,240
main difference yeah yeah exactly that

150
00:06:16,240 --> 00:06:18,720
that's sometimes it is necessary

151
00:06:18,720 --> 00:06:20,400
especially i think in mechanical

152
00:06:20,400 --> 00:06:21,840
engineering where

153
00:06:21,840 --> 00:06:23,840
you need really to know the center of

154
00:06:23,840 --> 00:06:26,080
gravity in multiple different simulation

155
00:06:26,080 --> 00:06:28,080
models we need to copy the value to

156
00:06:28,080 --> 00:06:30,080
synchronize the value

157
00:06:30,080 --> 00:06:32,800
across multiple models so that they can

158
00:06:32,800 --> 00:06:35,840
run and provide meaningful results but

159
00:06:35,840 --> 00:06:38,479
many engineering artifacts

160
00:06:38,479 --> 00:06:41,120
just need to be logically connected to

161
00:06:41,120 --> 00:06:43,840
to other artifacts such as a requirement

162
00:06:43,840 --> 00:06:45,919
it's it's not

163
00:06:45,919 --> 00:06:48,800
useful to copy a requirements around

164
00:06:48,800 --> 00:06:50,639
across different applications ideally

165
00:06:50,639 --> 00:06:52,800
you define it in one application

166
00:06:52,800 --> 00:06:54,800
and then you want to describe the

167
00:06:54,800 --> 00:06:57,759
context of this requirement and say well

168
00:06:57,759 --> 00:07:00,400
it has been tested by this test case

169
00:07:00,400 --> 00:07:02,639
this test case was using this simulation

170
00:07:02,639 --> 00:07:04,479
model which created this simulation

171
00:07:04,479 --> 00:07:05,840
result

172
00:07:05,840 --> 00:07:07,280
that kind of

173
00:07:07,280 --> 00:07:08,880
connectivity

174
00:07:08,880 --> 00:07:11,919
across engineering artifacts

175
00:07:11,919 --> 00:07:13,840
possibly across different product life

176
00:07:13,840 --> 00:07:15,599
cycle phases

177
00:07:15,599 --> 00:07:18,160
this is what i call data integration

178
00:07:18,160 --> 00:07:20,560
and we have many data integration

179
00:07:20,560 --> 00:07:21,919
solutions

180
00:07:21,919 --> 00:07:23,199
but

181
00:07:23,199 --> 00:07:26,880
we've got plm alm mbse solutions

182
00:07:26,880 --> 00:07:28,880
but they're not yet

183
00:07:28,880 --> 00:07:30,800
i would say they offered some level of

184
00:07:30,800 --> 00:07:32,240
connectivity

185
00:07:32,240 --> 00:07:34,880
but not yet this complete level of

186
00:07:34,880 --> 00:07:37,039
connectivity at the global level in a

187
00:07:37,039 --> 00:07:42,080
tool agnostic way which oslc supports

188
00:07:42,080 --> 00:07:44,960
okay so also c is a data integration

189
00:07:44,960 --> 00:07:47,680
standard so can you give us an overview

190
00:07:47,680 --> 00:07:49,360
of oclc

191
00:07:49,360 --> 00:07:53,759
so um to be more specific oslc is a set

192
00:07:53,759 --> 00:07:55,199
of standards

193
00:07:55,199 --> 00:07:58,560
for an application programming interface

194
00:07:58,560 --> 00:07:59,280
so

195
00:07:59,280 --> 00:08:01,120
uh imagine all these different data

196
00:08:01,120 --> 00:08:03,919
sources applications and databases in

197
00:08:03,919 --> 00:08:05,280
engineering

198
00:08:05,280 --> 00:08:08,160
and in order to be able to create these

199
00:08:08,160 --> 00:08:10,319
cross-domain links so these links that

200
00:08:10,319 --> 00:08:12,879
cross the boundaries of applications or

201
00:08:12,879 --> 00:08:14,879
domains

202
00:08:14,879 --> 00:08:18,080
we we cannot rely on the existing apis

203
00:08:18,080 --> 00:08:20,160
we need apis that offer a bit more

204
00:08:20,160 --> 00:08:22,560
freedom to create these cross-domain

205
00:08:22,560 --> 00:08:23,599
links

206
00:08:23,599 --> 00:08:25,120
and

207
00:08:25,120 --> 00:08:27,199
these interfaces to all these different

208
00:08:27,199 --> 00:08:29,599
data sources need to be standardized

209
00:08:29,599 --> 00:08:31,440
standardized in order to support the

210
00:08:31,440 --> 00:08:33,279
linking of data

211
00:08:33,279 --> 00:08:36,159
and this is so

212
00:08:36,159 --> 00:08:38,159
yes you can say oslt is a data

213
00:08:38,159 --> 00:08:41,360
integration standard but you can also

214
00:08:41,360 --> 00:08:45,040
more simply view it as an api standard

215
00:08:45,040 --> 00:08:48,240
which helps the creation of links

216
00:08:48,240 --> 00:08:50,800
um and

217
00:08:50,800 --> 00:08:53,120
and and when you think of apis you often

218
00:08:53,120 --> 00:08:55,519
think that the api clients

219
00:08:55,519 --> 00:08:57,120
are programs

220
00:08:57,120 --> 00:08:59,839
and that these oslt apis are only useful

221
00:08:59,839 --> 00:09:02,080
possibly for

222
00:09:02,080 --> 00:09:02,880
for

223
00:09:02,880 --> 00:09:04,720
developers writing some code against

224
00:09:04,720 --> 00:09:08,720
that oslt api but the oslc apis also

225
00:09:08,720 --> 00:09:10,320
expose

226
00:09:10,320 --> 00:09:14,240
dialogues meant to be consumed by humans

227
00:09:14,240 --> 00:09:16,800
so that we can easily

228
00:09:16,800 --> 00:09:19,200
embed certain things

229
00:09:19,200 --> 00:09:20,959
let's

230
00:09:20,959 --> 00:09:23,200
easily embed search dialogues in other

231
00:09:23,200 --> 00:09:24,480
applications

232
00:09:24,480 --> 00:09:28,480
so an oslt api is yeah um

233
00:09:28,480 --> 00:09:29,680
um

234
00:09:29,680 --> 00:09:31,360
supports the linking but not just at the

235
00:09:31,360 --> 00:09:33,120
code level but also at the more

236
00:09:33,120 --> 00:09:37,040
user-friendly graphical level

237
00:09:37,040 --> 00:09:39,440
did you mention it's uh

238
00:09:39,440 --> 00:09:41,680
specific to engineering or is it

239
00:09:41,680 --> 00:09:42,959
could it be independent of engineering

240
00:09:42,959 --> 00:09:45,360
so can i link an accounting system with

241
00:09:45,360 --> 00:09:47,120
a shop system for example

242
00:09:47,120 --> 00:09:48,800
yes indeed so

243
00:09:48,800 --> 00:09:52,080
right now oslc is used

244
00:09:52,080 --> 00:09:54,320
primarily within engineering but all the

245
00:09:54,320 --> 00:09:55,680
concepts

246
00:09:55,680 --> 00:09:56,720
are

247
00:09:56,720 --> 00:09:59,120
domain independent they could be used in

248
00:09:59,120 --> 00:10:02,880
accounting healthcare finance

249
00:10:02,880 --> 00:10:05,040
and uh actually

250
00:10:05,040 --> 00:10:06,480
oslc

251
00:10:06,480 --> 00:10:08,399
if you look under the hood you will see

252
00:10:08,399 --> 00:10:11,040
that it uses standards like rdf

253
00:10:11,040 --> 00:10:12,720
that

254
00:10:12,720 --> 00:10:15,519
web search engines like google also use

255
00:10:15,519 --> 00:10:16,839
to support data

256
00:10:16,839 --> 00:10:18,399
interoperability

257
00:10:18,399 --> 00:10:20,399
um so for example if you look at

258
00:10:20,399 --> 00:10:23,920
schema.org so oslc

259
00:10:23,920 --> 00:10:25,680
the set of standards that are used by

260
00:10:25,680 --> 00:10:27,040
oslt

261
00:10:27,040 --> 00:10:31,120
are very much aligned with

262
00:10:31,120 --> 00:10:32,959
the the web standards

263
00:10:32,959 --> 00:10:34,320
and and

264
00:10:34,320 --> 00:10:36,399
what what's going on in general on the

265
00:10:36,399 --> 00:10:40,160
web to to support connectivity

266
00:10:41,519 --> 00:10:43,760
okay so and when we are talking about a

267
00:10:43,760 --> 00:10:45,200
standard

268
00:10:45,200 --> 00:10:47,839
who is responsible for this thing

269
00:10:47,839 --> 00:10:49,120
yes so

270
00:10:49,120 --> 00:10:50,160
the

271
00:10:50,160 --> 00:10:51,839
organization now

272
00:10:51,839 --> 00:10:54,720
managing this the oslc standard is

273
00:10:54,720 --> 00:10:56,399
called oasis

274
00:10:56,399 --> 00:10:57,680
and

275
00:10:57,680 --> 00:11:00,560
right now it's managed under an open

276
00:11:00,560 --> 00:11:02,959
project meaning that anybody can

277
00:11:02,959 --> 00:11:04,079
actually

278
00:11:04,079 --> 00:11:06,399
for free join the meetings

279
00:11:06,399 --> 00:11:08,560
contribute to the standards

280
00:11:08,560 --> 00:11:10,720
the standards are available to the

281
00:11:10,720 --> 00:11:12,320
public

282
00:11:12,320 --> 00:11:15,360
no need to pay anything so the standards

283
00:11:15,360 --> 00:11:17,519
are really meant to

284
00:11:17,519 --> 00:11:20,320
to be visible and and to facilitate

285
00:11:20,320 --> 00:11:23,200
collaboration uh among engineers to

286
00:11:23,200 --> 00:11:25,200
improve them

287
00:11:25,200 --> 00:11:27,040
how many people are involved in the

288
00:11:27,040 --> 00:11:28,880
meetings typically

289
00:11:28,880 --> 00:11:32,000
and so that's development yes oh i would

290
00:11:32,000 --> 00:11:36,000
say maybe four or five yes

291
00:11:36,800 --> 00:11:39,680
these meetings are very technical

292
00:11:39,680 --> 00:11:41,360
and uh

293
00:11:41,360 --> 00:11:42,560
um

294
00:11:42,560 --> 00:11:45,920
it's it's not everybody's cup of tea

295
00:11:45,920 --> 00:11:46,959
and

296
00:11:46,959 --> 00:11:48,959
but

297
00:11:48,959 --> 00:11:51,760
recently a new series of meetings

298
00:11:51,760 --> 00:11:55,279
was created led by iran gary of

299
00:11:55,279 --> 00:11:56,480
ibm

300
00:11:56,480 --> 00:11:58,240
to

301
00:11:58,240 --> 00:12:01,200
actually just talk about osl oslc at a

302
00:12:01,200 --> 00:12:03,440
higher level and these are monthly

303
00:12:03,440 --> 00:12:05,360
meetings that are i think more

304
00:12:05,360 --> 00:12:07,680
interesting for persons who want to

305
00:12:07,680 --> 00:12:10,639
learn more about oslc and and also where

306
00:12:10,639 --> 00:12:12,560
oslc's heading

307
00:12:12,560 --> 00:12:15,279
rather than these very technical weekly

308
00:12:15,279 --> 00:12:16,480
meetings that are about the

309
00:12:16,480 --> 00:12:18,639
specifications and where you know

310
00:12:18,639 --> 00:12:20,480
honestly it's it's it's often quite

311
00:12:20,480 --> 00:12:24,200
boring sorry

312
00:12:24,800 --> 00:12:28,560
okay so we already learned you are

313
00:12:28,560 --> 00:12:32,000
dealing with oslc for about 10 years

314
00:12:32,000 --> 00:12:33,200
um

315
00:12:33,200 --> 00:12:34,399
is there

316
00:12:34,399 --> 00:12:35,839
uh yeah

317
00:12:35,839 --> 00:12:38,639
how is the adoption rate are there tools

318
00:12:38,639 --> 00:12:41,200
supporting all slc already can you name

319
00:12:41,200 --> 00:12:43,040
some of them

320
00:12:43,040 --> 00:12:46,079
sure so as for any new technology you

321
00:12:46,079 --> 00:12:47,680
have

322
00:12:47,680 --> 00:12:50,000
this

323
00:12:50,160 --> 00:12:51,760
you have different groups of persons who

324
00:12:51,760 --> 00:12:54,160
adopt it you have the innovators these

325
00:12:54,160 --> 00:12:55,519
are the first ones to adopted when you

326
00:12:55,519 --> 00:12:57,360
have the early adopters

327
00:12:57,360 --> 00:13:01,200
uh early majority late majority in lagga

328
00:13:01,200 --> 00:13:02,800
i would say that

329
00:13:02,800 --> 00:13:06,079
because ibm has a suite of tools that

330
00:13:06,079 --> 00:13:09,200
support oslc and these tools are quite

331
00:13:09,200 --> 00:13:11,360
well adopted already

332
00:13:11,360 --> 00:13:13,360
uh and and with these tools you can see

333
00:13:13,360 --> 00:13:16,399
oslt in action you can see the linking

334
00:13:16,399 --> 00:13:18,959
across tools and so i would say that an

335
00:13:18,959 --> 00:13:22,320
early majority of engineers

336
00:13:22,320 --> 00:13:26,079
are actually seeing oslc

337
00:13:26,079 --> 00:13:29,279
now there i would say among these

338
00:13:29,279 --> 00:13:31,120
organizations some are seeing the

339
00:13:31,120 --> 00:13:34,480
potential to use oslc to extend

340
00:13:34,480 --> 00:13:36,880
the ibm ecosystem to non-ibm

341
00:13:36,880 --> 00:13:40,800
applications using oslc

342
00:13:40,880 --> 00:13:44,000
and so i would call them early adopters

343
00:13:44,000 --> 00:13:47,760
and where oslc still used

344
00:13:47,760 --> 00:13:49,920
combination tightly with the ibm

345
00:13:49,920 --> 00:13:52,399
applications

346
00:13:52,399 --> 00:13:54,480
you also have

347
00:13:54,480 --> 00:13:56,800
obviously other vendors supporting oslc

348
00:13:56,800 --> 00:13:59,600
but very often it's

349
00:13:59,600 --> 00:14:00,480
for

350
00:14:00,480 --> 00:14:02,800
an integration with ibm that's often

351
00:14:02,800 --> 00:14:05,440
it's not always the case some also use

352
00:14:05,440 --> 00:14:06,320
it

353
00:14:06,320 --> 00:14:08,720
to to link within their own tool suite i

354
00:14:08,720 --> 00:14:11,680
think ptc is an example

355
00:14:11,680 --> 00:14:13,440
and i would say that you have innovators

356
00:14:13,440 --> 00:14:15,199
a much smaller group

357
00:14:15,199 --> 00:14:17,920
who is looking at oslc really to achieve

358
00:14:17,920 --> 00:14:20,320
connectivity completely independent of

359
00:14:20,320 --> 00:14:21,279
ibm

360
00:14:21,279 --> 00:14:22,560
to really

361
00:14:22,560 --> 00:14:26,480
look at the pure oslc and and what is uh

362
00:14:26,480 --> 00:14:29,440
what can be built with oslc

363
00:14:29,440 --> 00:14:32,480
um and i yeah i i actually think we've

364
00:14:32,480 --> 00:14:34,399
only seen the tip of the iceberg of what

365
00:14:34,399 --> 00:14:37,279
is possible with with all resources

366
00:14:37,279 --> 00:14:39,680
yeah people are talking a lot about it

367
00:14:39,680 --> 00:14:40,480
for

368
00:14:40,480 --> 00:14:42,399
quite some time now

369
00:14:42,399 --> 00:14:45,519
and it's it's very interesting

370
00:14:45,519 --> 00:14:47,839
how long it takes to

371
00:14:47,839 --> 00:14:50,399
yeah to really integrate uh tools with

372
00:14:50,399 --> 00:14:52,959
oslc and i think

373
00:14:52,959 --> 00:14:56,839
one thing is that many tools just

374
00:14:56,839 --> 00:15:01,279
uh yeah integrate the consumer part

375
00:15:01,279 --> 00:15:02,720
they want to

376
00:15:02,720 --> 00:15:04,560
gather in information but they don't

377
00:15:04,560 --> 00:15:07,760
want to expose information

378
00:15:07,760 --> 00:15:10,560
exactly that is confusing and misleading

379
00:15:10,560 --> 00:15:13,120
because many vendors will say on their

380
00:15:13,120 --> 00:15:15,440
web page we support oslc

381
00:15:15,440 --> 00:15:18,000
but actually they're just consuming the

382
00:15:18,000 --> 00:15:20,880
data from an oslc api

383
00:15:20,880 --> 00:15:23,440
and not actually really supporting oslc

384
00:15:23,440 --> 00:15:26,959
by exposing their data as oslt resources

385
00:15:26,959 --> 00:15:28,959
that can be linked than with with other

386
00:15:28,959 --> 00:15:30,639
engineering artifacts

387
00:15:30,639 --> 00:15:32,880
that's indeed

388
00:15:32,880 --> 00:15:34,959
quite annoying yes yes

389
00:15:34,959 --> 00:15:38,079
is there any certification for tools so

390
00:15:38,079 --> 00:15:40,720
that i need a certificate to

391
00:15:40,720 --> 00:15:42,959
announce that i'm also a second form or

392
00:15:42,959 --> 00:15:44,880
is there a validation suite or something

393
00:15:44,880 --> 00:15:46,800
like that available

394
00:15:46,800 --> 00:15:48,959
so

395
00:15:48,959 --> 00:15:52,560
i i think it's necessary to ask

396
00:15:52,560 --> 00:15:54,720
some persons in the oslc community to

397
00:15:54,720 --> 00:15:57,600
give you to be 100 certain i'm not aware

398
00:15:57,600 --> 00:15:59,680
of such a validation suite

399
00:15:59,680 --> 00:16:02,399
but i i think informally one has been

400
00:16:02,399 --> 00:16:04,639
certainly developed and there's one that

401
00:16:04,639 --> 00:16:06,480
is open source

402
00:16:06,480 --> 00:16:10,079
um but now you know you have

403
00:16:10,079 --> 00:16:11,600
within oslc so many different

404
00:16:11,600 --> 00:16:13,279
specifications

405
00:16:13,279 --> 00:16:15,920
so that some of them are domain specific

406
00:16:15,920 --> 00:16:18,000
some are domain independent

407
00:16:18,000 --> 00:16:21,120
um that's also maybe why oslt is

408
00:16:21,120 --> 00:16:23,120
considered complicated because it covers

409
00:16:23,120 --> 00:16:25,040
many aspects

410
00:16:25,040 --> 00:16:26,079
and

411
00:16:26,079 --> 00:16:28,240
so

412
00:16:29,040 --> 00:16:30,720
many

413
00:16:30,720 --> 00:16:32,079
uh

414
00:16:32,079 --> 00:16:35,040
tools that claims for oslt will only

415
00:16:35,040 --> 00:16:38,800
support certain aspects of oslc

416
00:16:38,800 --> 00:16:40,959
and

417
00:16:42,959 --> 00:16:45,519
is it an issue in in practice

418
00:16:45,519 --> 00:16:47,279
that for example a tool

419
00:16:47,279 --> 00:16:49,279
announces that it's also a secret form

420
00:16:49,279 --> 00:16:51,680
but uh well it's not 100 confirmed to

421
00:16:51,680 --> 00:16:54,800
the standard and so it does not work

422
00:16:54,800 --> 00:16:56,639
so like uh interoperability between

423
00:16:56,639 --> 00:16:58,720
system l tools and there's a data

424
00:16:58,720 --> 00:17:00,800
exchange form at xmi but well it doesn't

425
00:17:00,800 --> 00:17:02,959
work very well

426
00:17:02,959 --> 00:17:05,599
so um

427
00:17:05,599 --> 00:17:08,000
yeah as christian mentioned the the

428
00:17:08,000 --> 00:17:09,679
problem is that

429
00:17:09,679 --> 00:17:11,919
the vendors don't specify how they

430
00:17:11,919 --> 00:17:13,520
support oslc

431
00:17:13,520 --> 00:17:15,599
so that's where

432
00:17:15,599 --> 00:17:17,280
you know you think oh it's great they

433
00:17:17,280 --> 00:17:18,959
support oslc but then they they just

434
00:17:18,959 --> 00:17:21,919
consume the oslc

435
00:17:21,919 --> 00:17:24,160
another oslt api they don't expose

436
00:17:24,160 --> 00:17:26,400
themselves in the slc api

437
00:17:26,400 --> 00:17:28,079
which is

438
00:17:28,079 --> 00:17:29,600
uh to be honest

439
00:17:29,600 --> 00:17:31,120
something that

440
00:17:31,120 --> 00:17:32,720
maybe goes against the business

441
00:17:32,720 --> 00:17:34,880
incentive of a software vendor because

442
00:17:34,880 --> 00:17:36,880
you're opening up

443
00:17:36,880 --> 00:17:39,679
your data to to the users

444
00:17:39,679 --> 00:17:40,720
and so

445
00:17:40,720 --> 00:17:42,960
you're

446
00:17:43,280 --> 00:17:44,240
you know

447
00:17:44,240 --> 00:17:47,360
you're possibly losing vendor lock-in so

448
00:17:47,360 --> 00:17:49,039
that's one risk

449
00:17:49,039 --> 00:17:51,840
um which you know some vendors could

450
00:17:51,840 --> 00:17:53,360
also say that

451
00:17:53,360 --> 00:17:55,440
there are many opportunities with oslc

452
00:17:55,440 --> 00:17:58,480
so it makes sense to to fully adopt it

453
00:17:58,480 --> 00:18:00,880
and and offer new applications that can

454
00:18:00,880 --> 00:18:05,520
only be built on top of these oso c apis

455
00:18:06,480 --> 00:18:08,160
okay

456
00:18:08,160 --> 00:18:08,980
so um

457
00:18:08,980 --> 00:18:10,640
[Music]

458
00:18:10,640 --> 00:18:13,039
in in respect to time we can't go into

459
00:18:13,039 --> 00:18:16,400
every detail of oslc but i guess there

460
00:18:16,400 --> 00:18:18,559
are two or three

461
00:18:18,559 --> 00:18:21,200
things we we should have a look into and

462
00:18:21,200 --> 00:18:23,679
axel already mentioned some of them so

463
00:18:23,679 --> 00:18:25,679
he often talked about an oclc

464
00:18:25,679 --> 00:18:27,840
specification

465
00:18:27,840 --> 00:18:30,240
just to drop another name

466
00:18:30,240 --> 00:18:33,000
oslc specifications are around a

467
00:18:33,000 --> 00:18:35,679
vocabulary and this could be domain

468
00:18:35,679 --> 00:18:37,440
specific or

469
00:18:37,440 --> 00:18:40,400
not domain dependent

470
00:18:40,400 --> 00:18:41,679
and

471
00:18:41,679 --> 00:18:44,720
to my knowledge uh the vocabulary is

472
00:18:44,720 --> 00:18:47,280
the real important thing

473
00:18:47,280 --> 00:18:48,120
to

474
00:18:48,120 --> 00:18:51,360
standardize things so that every tool

475
00:18:51,360 --> 00:18:54,320
talks about the same thing even it it

476
00:18:54,320 --> 00:18:56,480
calls it internally different

477
00:18:56,480 --> 00:18:59,360
to the outside over the oslc api

478
00:18:59,360 --> 00:19:02,240
it's called this and that and

479
00:19:02,240 --> 00:19:04,480
it's totally up for that systems

480
00:19:04,480 --> 00:19:08,000
what is meant exactly so

481
00:19:08,240 --> 00:19:11,840
oslc has standards to describe domain

482
00:19:11,840 --> 00:19:14,320
specific resources like requirements

483
00:19:14,320 --> 00:19:17,919
test cases so that's also to support

484
00:19:17,919 --> 00:19:20,000
interoperability to the exchange of

485
00:19:20,000 --> 00:19:21,200
these requirements with other

486
00:19:21,200 --> 00:19:22,960
applications

487
00:19:22,960 --> 00:19:25,120
oslc has some

488
00:19:25,120 --> 00:19:27,120
uh standards describing the domain

489
00:19:27,120 --> 00:19:29,520
independent aspects such as the versions

490
00:19:29,520 --> 00:19:31,760
of resources the change events of

491
00:19:31,760 --> 00:19:35,280
resources but access rules

492
00:19:35,520 --> 00:19:36,799
now

493
00:19:36,799 --> 00:19:40,400
somehow oslc must

494
00:19:40,400 --> 00:19:42,960
define okay what are the concepts that

495
00:19:42,960 --> 00:19:45,120
we're using to define the versions or

496
00:19:45,120 --> 00:19:47,360
these domain specific

497
00:19:47,360 --> 00:19:48,400
entities

498
00:19:48,400 --> 00:19:50,320
and oslc

499
00:19:50,320 --> 00:19:52,240
has looked at the web what does the web

500
00:19:52,240 --> 00:19:53,200
do

501
00:19:53,200 --> 00:19:54,960
and

502
00:19:54,960 --> 00:19:57,120
the an example

503
00:19:57,120 --> 00:19:58,559
actually a great example of data

504
00:19:58,559 --> 00:20:00,240
interoperability at web scale is

505
00:20:00,240 --> 00:20:01,840
schema.org

506
00:20:01,840 --> 00:20:02,640
so

507
00:20:02,640 --> 00:20:04,080
this is where

508
00:20:04,080 --> 00:20:06,000
you have a bunch of concepts that have

509
00:20:06,000 --> 00:20:08,799
been defined so this is a movie this is

510
00:20:08,799 --> 00:20:10,640
a recipe etc

511
00:20:10,640 --> 00:20:12,799
but all these concepts

512
00:20:12,799 --> 00:20:15,919
need to be identified in a unique way

513
00:20:15,919 --> 00:20:18,720
and with schema.org they are identified

514
00:20:18,720 --> 00:20:22,159
using a url an http url

515
00:20:22,159 --> 00:20:24,880
the advantage of identifying these

516
00:20:24,880 --> 00:20:27,039
concepts that you want to standardize

517
00:20:27,039 --> 00:20:30,240
using http urls is that on the one hand

518
00:20:30,240 --> 00:20:32,840
you can test if these are unique

519
00:20:32,840 --> 00:20:35,679
identifiers and at the same time you can

520
00:20:35,679 --> 00:20:38,240
use these identifiers to access

521
00:20:38,240 --> 00:20:40,320
these concepts so

522
00:20:40,320 --> 00:20:42,960
i can do an http gets

523
00:20:42,960 --> 00:20:44,480
and and

524
00:20:44,480 --> 00:20:47,039
access the description of this

525
00:20:47,039 --> 00:20:49,120
concept um

526
00:20:49,120 --> 00:20:51,039
so

527
00:20:51,039 --> 00:20:54,000
you i really recommend everybody

528
00:20:54,000 --> 00:20:56,080
to look at schema.org

529
00:20:56,080 --> 00:20:57,200
and

530
00:20:57,200 --> 00:21:00,840
i really think that it shows i think

531
00:21:00,840 --> 00:21:04,080
how standards should be defined

532
00:21:04,080 --> 00:21:05,360
not just

533
00:21:05,360 --> 00:21:07,919
for movies recipes and not just for nbsc

534
00:21:07,919 --> 00:21:10,159
but actually across all engineering

535
00:21:10,159 --> 00:21:12,559
um it's it's um

536
00:21:12,559 --> 00:21:14,559
i think it makes sense to be aligned

537
00:21:14,559 --> 00:21:15,600
with

538
00:21:15,600 --> 00:21:16,520
data

539
00:21:16,520 --> 00:21:18,720
interoperability practices that are

540
00:21:18,720 --> 00:21:20,880
already so widely adopted

541
00:21:20,880 --> 00:21:23,039
and and and

542
00:21:23,039 --> 00:21:24,880
you need to keep in mind that over half

543
00:21:24,880 --> 00:21:27,120
of the web pages

544
00:21:27,120 --> 00:21:29,440
contain urls that point to these

545
00:21:29,440 --> 00:21:32,080
standardized concepts

546
00:21:32,080 --> 00:21:34,720
defined in schema.org so

547
00:21:34,720 --> 00:21:37,039
okay so basically what i'm trying to say

548
00:21:37,039 --> 00:21:39,600
is oslc adopts

549
00:21:39,600 --> 00:21:40,960
for the different definition of these

550
00:21:40,960 --> 00:21:42,320
vocabularies

551
00:21:42,320 --> 00:21:45,440
the same approach as schema.org

552
00:21:45,440 --> 00:21:48,159
and schema.org is supported by the

553
00:21:48,159 --> 00:21:50,880
search engines like google bing yahoo

554
00:21:50,880 --> 00:21:52,960
and and supported by all the

555
00:21:52,960 --> 00:21:55,200
web content creators and

556
00:21:55,200 --> 00:21:57,919
it's a huge number because over half of

557
00:21:57,919 --> 00:21:59,039
the web page

558
00:21:59,039 --> 00:22:00,480
web pages

559
00:22:00,480 --> 00:22:03,760
have had links just to matter

560
00:22:07,840 --> 00:22:09,679
how are the concepts identified but i

561
00:22:09,679 --> 00:22:11,760
asked such a service to give me the the

562
00:22:11,760 --> 00:22:14,159
specification of a movie so uh what do i

563
00:22:14,159 --> 00:22:16,000
get do i get some some text that

564
00:22:16,000 --> 00:22:18,480
explains what a movie is uh or is it

565
00:22:18,480 --> 00:22:19,840
more formal

566
00:22:19,840 --> 00:22:22,480
so yeah it needs to be machine readable

567
00:22:22,480 --> 00:22:24,400
so that the search engines

568
00:22:24,400 --> 00:22:25,360
um

569
00:22:25,360 --> 00:22:27,520
understand that

570
00:22:27,520 --> 00:22:30,559
uh like a movie database like imdb

571
00:22:30,559 --> 00:22:32,559
contains plenty of movies and their

572
00:22:32,559 --> 00:22:33,840
ratings

573
00:22:33,840 --> 00:22:35,120
now

574
00:22:35,120 --> 00:22:38,400
when we look at this movie page of imdb

575
00:22:38,400 --> 00:22:40,400
we see a rating

576
00:22:40,400 --> 00:22:42,880
but the search engine like google

577
00:22:42,880 --> 00:22:45,039
will need to understand that what we're

578
00:22:45,039 --> 00:22:48,320
looking at 7 out of 10 is actually movie

579
00:22:48,320 --> 00:22:49,440
rating

580
00:22:49,440 --> 00:22:50,480
and

581
00:22:50,480 --> 00:22:51,440
so

582
00:22:51,440 --> 00:22:54,159
there's the html content of the page and

583
00:22:54,159 --> 00:22:56,960
in addition either embedded in the html

584
00:22:56,960 --> 00:22:58,240
or

585
00:22:58,240 --> 00:22:59,360
next to it

586
00:22:59,360 --> 00:23:01,520
you will find some rdf

587
00:23:01,520 --> 00:23:03,679
rdf is some machinable data machine

588
00:23:03,679 --> 00:23:05,039
readable data

589
00:23:05,039 --> 00:23:06,320
saying

590
00:23:06,320 --> 00:23:09,360
that actually we have a resource of type

591
00:23:09,360 --> 00:23:11,039
movie rating

592
00:23:11,039 --> 00:23:13,280
uh it has a rating value of seven the

593
00:23:13,280 --> 00:23:15,360
maximum value is ten

594
00:23:15,360 --> 00:23:16,720
and google

595
00:23:16,720 --> 00:23:18,720
or another search engine will understand

596
00:23:18,720 --> 00:23:19,760
this

597
00:23:19,760 --> 00:23:22,400
and then if you do a search for me for

598
00:23:22,400 --> 00:23:24,400
that particular movie

599
00:23:24,400 --> 00:23:26,799
it will show you the movie ratings from

600
00:23:26,799 --> 00:23:28,960
multiple movie databases

601
00:23:28,960 --> 00:23:30,240
right away

602
00:23:30,240 --> 00:23:32,080
because it has already collected that

603
00:23:32,080 --> 00:23:33,360
information and understood that

604
00:23:33,360 --> 00:23:35,200
information

605
00:23:35,200 --> 00:23:36,720
so

606
00:23:36,720 --> 00:23:38,720
in um

607
00:23:38,720 --> 00:23:40,400
there's really nothing special you know

608
00:23:40,400 --> 00:23:43,279
in defining standardized concepts

609
00:23:43,279 --> 00:23:44,720
it's just that

610
00:23:44,720 --> 00:23:47,279
they need to have unique identifiers

611
00:23:47,279 --> 00:23:49,520
and in our world

612
00:23:49,520 --> 00:23:51,520
the most practical

613
00:23:51,520 --> 00:23:52,320
you

614
00:23:52,320 --> 00:23:54,000
i would say most suitable unique

615
00:23:54,000 --> 00:23:56,960
identifiers are http urls

616
00:23:56,960 --> 00:23:59,360
otherwise we end up with a requirement

617
00:23:59,360 --> 00:24:01,520
to find the cml a requirement to find a

618
00:24:01,520 --> 00:24:04,080
red if a requirement defined in uh you

619
00:24:04,080 --> 00:24:06,159
know step by the step community

620
00:24:06,159 --> 00:24:09,039
and and we need to easily distinguish

621
00:24:09,039 --> 00:24:12,240
them and easily access them also

622
00:24:12,240 --> 00:24:14,880
so if everybody was using rdfs for

623
00:24:14,880 --> 00:24:17,440
example for standardization purposes

624
00:24:17,440 --> 00:24:19,919
we would be able much more easily to see

625
00:24:19,919 --> 00:24:22,960
the differences or the things that are

626
00:24:22,960 --> 00:24:24,559
in common between all these different

627
00:24:24,559 --> 00:24:26,000
engineering standards

628
00:24:26,000 --> 00:24:26,880
yeah

629
00:24:26,880 --> 00:24:30,240
and there we are um yeah quite

630
00:24:30,240 --> 00:24:31,840
near the topic we had with fabian

631
00:24:31,840 --> 00:24:34,320
neuhaus where we talked about ontologies

632
00:24:34,320 --> 00:24:36,400
and distributed ontologies

633
00:24:36,400 --> 00:24:38,159
and this is also a very interesting

634
00:24:38,159 --> 00:24:41,120
point but bringing it back to um to the

635
00:24:41,120 --> 00:24:43,279
engineering domain so

636
00:24:43,279 --> 00:24:45,200
if you are looking to the requirements

637
00:24:45,200 --> 00:24:48,559
management specification you see

638
00:24:48,559 --> 00:24:51,600
it is specified like

639
00:24:51,600 --> 00:24:55,039
a requirement has exactly one id it has

640
00:24:55,039 --> 00:24:58,000
exactly one name it might have a change

641
00:24:58,000 --> 00:25:01,039
date or i made this thing up

642
00:25:01,039 --> 00:25:03,520
but but it tells you

643
00:25:03,520 --> 00:25:04,559
yeah

644
00:25:04,559 --> 00:25:07,760
how you describe a requirement and what

645
00:25:07,760 --> 00:25:08,640
you

646
00:25:08,640 --> 00:25:11,279
must provide if you are compliant to

647
00:25:11,279 --> 00:25:14,159
this specification and what might be and

648
00:25:14,159 --> 00:25:14,960
uh

649
00:25:14,960 --> 00:25:15,760
yeah

650
00:25:15,760 --> 00:25:18,080
might be there in data

651
00:25:18,080 --> 00:25:18,880
and

652
00:25:18,880 --> 00:25:23,279
another interesting thing i find in oslc

653
00:25:23,279 --> 00:25:26,000
is that you have this 80 20 approach

654
00:25:26,000 --> 00:25:26,880
so

655
00:25:26,880 --> 00:25:28,480
these groups defining those

656
00:25:28,480 --> 00:25:31,360
specifications are trying to define the

657
00:25:31,360 --> 00:25:34,400
most common eighty percent uh of

658
00:25:34,400 --> 00:25:36,880
those resources of a requirement for

659
00:25:36,880 --> 00:25:37,919
example

660
00:25:37,919 --> 00:25:42,320
and uh yeah tool vendors or users are

661
00:25:42,320 --> 00:25:45,440
able to extend those specifications

662
00:25:45,440 --> 00:25:46,960
right

663
00:25:46,960 --> 00:25:49,279
exactly and i think

664
00:25:49,279 --> 00:25:52,480
any standardization efforts in general

665
00:25:52,480 --> 00:25:54,960
would have will adopt the same approach

666
00:25:54,960 --> 00:25:56,880
i'm sure within the csml

667
00:25:56,880 --> 00:25:58,480
standardization committee you're also

668
00:25:58,480 --> 00:26:00,240
trying to cover 80

669
00:26:00,240 --> 00:26:02,720
of the most important topics and then

670
00:26:02,720 --> 00:26:04,640
with stereotypes you can always you know

671
00:26:04,640 --> 00:26:06,320
support extensions

672
00:26:06,320 --> 00:26:11,200
so i don't think this is unique to oslc

673
00:26:11,200 --> 00:26:13,760
the extension mechanism with rdf is very

674
00:26:13,760 --> 00:26:15,679
simple because

675
00:26:15,679 --> 00:26:18,320
by definition rdf supports this open

676
00:26:18,320 --> 00:26:21,360
world assumption

677
00:26:21,520 --> 00:26:24,159
and actually we need to constrain it we

678
00:26:24,159 --> 00:26:26,960
we don't want to have chaos and any kind

679
00:26:26,960 --> 00:26:27,840
of

680
00:26:27,840 --> 00:26:30,240
um

681
00:26:31,600 --> 00:26:32,960
we don't want to see a requirement be

682
00:26:32,960 --> 00:26:34,080
defined in

683
00:26:34,080 --> 00:26:35,679
10 million different ways we do want to

684
00:26:35,679 --> 00:26:38,640
constrain how a requirement is defined

685
00:26:38,640 --> 00:26:40,799
and so

686
00:26:40,799 --> 00:26:43,600
within oslc we use shackle or resource

687
00:26:43,600 --> 00:26:46,559
shapes to provide constraints to say

688
00:26:46,559 --> 00:26:49,039
yeah a requirement must have for example

689
00:26:49,039 --> 00:26:49,720
an

690
00:26:49,720 --> 00:26:53,840
identifier um and uh

691
00:26:53,840 --> 00:26:55,360
yeah yeah so

692
00:26:55,360 --> 00:26:57,600
um

693
00:26:57,679 --> 00:26:59,760
just to say that these

694
00:26:59,760 --> 00:27:01,600
what we're talking about there is i

695
00:27:01,600 --> 00:27:03,840
would say not unique to oslc

696
00:27:03,840 --> 00:27:07,840
it's common to any standardization

697
00:27:09,279 --> 00:27:11,120
you mentioned system several times and

698
00:27:11,120 --> 00:27:13,200
you also mentioned several people who

699
00:27:13,200 --> 00:27:14,720
are heavily involved in the system

700
00:27:14,720 --> 00:27:17,279
standardization like um roger burkett

701
00:27:17,279 --> 00:27:18,960
who's one of the co-developer of system

702
00:27:18,960 --> 00:27:21,360
l or aaron gary

703
00:27:21,360 --> 00:27:23,360
who's involved in uml and systemic

704
00:27:23,360 --> 00:27:24,720
development and also in the current

705
00:27:24,720 --> 00:27:27,840
system v2 development so um

706
00:27:27,840 --> 00:27:29,600
there seems to be a relationship between

707
00:27:29,600 --> 00:27:32,000
oslc and system a

708
00:27:32,000 --> 00:27:36,000
so how they are related absolutely so

709
00:27:36,000 --> 00:27:37,520
you maybe remember

710
00:27:37,520 --> 00:27:40,480
this picture of csml where you see a

711
00:27:40,480 --> 00:27:43,120
cube and you see that cisono connects

712
00:27:43,120 --> 00:27:46,559
requirements to structure and behavior

713
00:27:46,559 --> 00:27:48,880
so

714
00:27:48,880 --> 00:27:51,200
sysml is about connecting information as

715
00:27:51,200 --> 00:27:52,000
well

716
00:27:52,000 --> 00:27:54,480
um it's it's just that

717
00:27:54,480 --> 00:27:55,520
um

718
00:27:55,520 --> 00:27:57,600
you're connecting information at a very

719
00:27:57,600 --> 00:27:59,520
high level of abstraction

720
00:27:59,520 --> 00:28:00,960
and if it's the only thing you want to

721
00:28:00,960 --> 00:28:01,760
do

722
00:28:01,760 --> 00:28:03,679
you're good with csml

723
00:28:03,679 --> 00:28:06,320
i would say that so you're connecting

724
00:28:06,320 --> 00:28:08,320
the information horizontally right you

725
00:28:08,320 --> 00:28:10,080
know from requirements to structure and

726
00:28:10,080 --> 00:28:13,120
behavior but at an at an abstract level

727
00:28:13,120 --> 00:28:16,720
yeah the horizontal silo exactly

728
00:28:16,720 --> 00:28:19,679
exactly connecting horizontally

729
00:28:19,679 --> 00:28:21,200
and i would say that

730
00:28:21,200 --> 00:28:24,000
it's useful to connect also vertically

731
00:28:24,000 --> 00:28:26,799
from abstract to specific

732
00:28:26,799 --> 00:28:28,720
because at some point you need the real

733
00:28:28,720 --> 00:28:31,039
simulation models for real simulation

734
00:28:31,039 --> 00:28:32,320
results

735
00:28:32,320 --> 00:28:33,840
that will tell you if your system

736
00:28:33,840 --> 00:28:36,799
architecture is even feasible or if if

737
00:28:36,799 --> 00:28:39,039
it's um

738
00:28:39,039 --> 00:28:41,600
in sync with what's going on

739
00:28:41,600 --> 00:28:43,440
at a detailed level

740
00:28:43,440 --> 00:28:45,760
and that's where oslc then becomes

741
00:28:45,760 --> 00:28:48,080
useful for these vertical

742
00:28:48,080 --> 00:28:52,480
connections that's that's one aspect

743
00:28:53,760 --> 00:28:56,320
also

744
00:28:57,840 --> 00:29:02,080
it's in like i should say this um

745
00:29:02,080 --> 00:29:04,480
we have even at a higher level of

746
00:29:04,480 --> 00:29:06,000
abstraction

747
00:29:06,000 --> 00:29:08,240
we might be using different tools

748
00:29:08,240 --> 00:29:10,000
engineers might be using a tool just for

749
00:29:10,000 --> 00:29:13,279
requirements another just for test cases

750
00:29:13,279 --> 00:29:16,159
um so they might not always be using uh

751
00:29:16,159 --> 00:29:19,200
system errors so oslc

752
00:29:19,200 --> 00:29:21,760
is also useful for for systems engineers

753
00:29:21,760 --> 00:29:24,000
who want to connect the data

754
00:29:24,000 --> 00:29:26,720
at that abstract level horizontally

755
00:29:26,720 --> 00:29:28,640
across different tools

756
00:29:28,640 --> 00:29:30,240
um

757
00:29:30,240 --> 00:29:31,919
and um

758
00:29:31,919 --> 00:29:33,760
i would say that the

759
00:29:33,760 --> 00:29:36,240
i mean the fundamental

760
00:29:36,240 --> 00:29:38,559
um

761
00:29:38,640 --> 00:29:43,760
difference that oslc enables is that

762
00:29:43,760 --> 00:29:45,760
before oslc

763
00:29:45,760 --> 00:29:47,760
these links have to be created within a

764
00:29:47,760 --> 00:29:49,840
specific application these crosstalk

765
00:29:49,840 --> 00:29:52,880
maintenance i either use a plm solution

766
00:29:52,880 --> 00:29:55,520
or an alm solution or an nbs nbsc

767
00:29:55,520 --> 00:29:57,440
solution to create these cross domain

768
00:29:57,440 --> 00:29:59,840
links to say that my requirement is

769
00:29:59,840 --> 00:30:02,720
linked to a blog or a test case etc

770
00:30:02,720 --> 00:30:04,799
you're dependent on one specific

771
00:30:04,799 --> 00:30:06,799
application to do this

772
00:30:06,799 --> 00:30:10,320
and with oslc the creation of links can

773
00:30:10,320 --> 00:30:13,039
now happen in a distributed way

774
00:30:13,039 --> 00:30:15,200
engineers can stay within their domain

775
00:30:15,200 --> 00:30:17,760
specific applications to create these

776
00:30:17,760 --> 00:30:19,919
links they don't have to switch to

777
00:30:19,919 --> 00:30:22,799
another application like a plm alm or

778
00:30:22,799 --> 00:30:25,840
mdsc solution to break these links

779
00:30:25,840 --> 00:30:29,120
and that reduces the barrier

780
00:30:29,120 --> 00:30:31,120
to creating the links

781
00:30:31,120 --> 00:30:34,399
and so um and i honestly think it all

782
00:30:34,399 --> 00:30:36,399
this is inspired by the web

783
00:30:36,399 --> 00:30:37,600
um

784
00:30:37,600 --> 00:30:39,760
if for example

785
00:30:39,760 --> 00:30:42,000
you could only add content to the web

786
00:30:42,000 --> 00:30:43,039
through

787
00:30:43,039 --> 00:30:45,200
one single app application there would

788
00:30:45,200 --> 00:30:46,640
be a bottleneck

789
00:30:46,640 --> 00:30:47,520
and

790
00:30:47,520 --> 00:30:49,440
use all kinds of tools to to create

791
00:30:49,440 --> 00:30:50,799
content for the web right now in a

792
00:30:50,799 --> 00:30:52,960
distributed way and that's why the web

793
00:30:52,960 --> 00:30:55,679
can scale so um

794
00:30:55,679 --> 00:30:57,039
and and

795
00:30:57,039 --> 00:30:59,679
so these cross domain links

796
00:30:59,679 --> 00:31:02,159
in the past we've just reviewed them as

797
00:31:02,159 --> 00:31:03,679
oh it's just another piece of data

798
00:31:03,679 --> 00:31:05,440
within an application

799
00:31:05,440 --> 00:31:07,679
but i think we need to elevate

800
00:31:07,679 --> 00:31:11,279
the concept of these cross-domain links

801
00:31:11,279 --> 00:31:13,519
and view them as first-class citizens we

802
00:31:13,519 --> 00:31:15,919
have the domain-specific data

803
00:31:15,919 --> 00:31:17,279
and at the same

804
00:31:17,279 --> 00:31:19,360
level of importance we need to manage

805
00:31:19,360 --> 00:31:21,360
these cross-domain links

806
00:31:21,360 --> 00:31:23,919
and ideally we need to manage them

807
00:31:23,919 --> 00:31:25,679
in a way that is independent of a

808
00:31:25,679 --> 00:31:28,240
specific application that's the only way

809
00:31:28,240 --> 00:31:30,480
we can manage them in a scalable way in

810
00:31:30,480 --> 00:31:32,720
the long term i i'm sorry that my answer

811
00:31:32,720 --> 00:31:33,679
went a bit

812
00:31:33,679 --> 00:31:35,360
was a bit longer but i think these were

813
00:31:35,360 --> 00:31:36,799
ideas that were in my mind that i wanted

814
00:31:36,799 --> 00:31:38,159
to it

815
00:31:38,159 --> 00:31:40,399
it brings to a point what what's the

816
00:31:40,399 --> 00:31:44,480
idea behind the new system lv2 api and

817
00:31:44,480 --> 00:31:46,720
i think it's no coincidence that there

818
00:31:46,720 --> 00:31:49,120
were people who said okay we also want a

819
00:31:49,120 --> 00:31:52,240
platform-specific binding for oslc for

820
00:31:52,240 --> 00:31:56,159
this uh system lv2 api just to

821
00:31:56,159 --> 00:31:58,720
yeah to realize exactly that what what

822
00:31:58,720 --> 00:32:01,600
you axel what you described right now

823
00:32:01,600 --> 00:32:03,919
exactly keep in mind that this idea of

824
00:32:03,919 --> 00:32:06,240
using platform independent and platform

825
00:32:06,240 --> 00:32:09,760
specific bindings

826
00:32:10,320 --> 00:32:12,880
it might actually

827
00:32:12,880 --> 00:32:14,919
create by design a lack of

828
00:32:14,919 --> 00:32:17,440
interoperability so i remember for uml

829
00:32:17,440 --> 00:32:20,080
and csml you have this nice separation

830
00:32:20,080 --> 00:32:21,440
of platform independent platform

831
00:32:21,440 --> 00:32:23,600
specific then you could define

832
00:32:23,600 --> 00:32:25,919
stereotypes and xmi many different ways

833
00:32:25,919 --> 00:32:28,080
and we didn't have interoperability

834
00:32:28,080 --> 00:32:30,720
between csml tools so every time i hear

835
00:32:30,720 --> 00:32:31,840
oh we have something platform

836
00:32:31,840 --> 00:32:34,720
independent something platform specific

837
00:32:34,720 --> 00:32:37,519
i i i see the potential for

838
00:32:37,519 --> 00:32:39,519
a gap between the platform independent

839
00:32:39,519 --> 00:32:41,360
and platform specific

840
00:32:41,360 --> 00:32:43,360
and the possibility for many different

841
00:32:43,360 --> 00:32:45,679
platform-specific implementations that

842
00:32:45,679 --> 00:32:47,519
end up not being compatible

843
00:32:47,519 --> 00:32:49,279
so i really hope we learn the lesson

844
00:32:49,279 --> 00:32:51,600
from system lv one when it comes to the

845
00:32:51,600 --> 00:32:55,440
system rd2 api in that we can actually

846
00:32:55,440 --> 00:32:57,279
be very specific when it comes to the

847
00:32:57,279 --> 00:32:59,760
api and it's only by being specific that

848
00:32:59,760 --> 00:33:00,480
we

849
00:33:00,480 --> 00:33:04,640
avoid any misinterpretations and and and

850
00:33:04,640 --> 00:33:06,399
and you know uh problems with

851
00:33:06,399 --> 00:33:09,399
interoperability

852
00:33:10,080 --> 00:33:13,200
it brings to my mind just right now that

853
00:33:13,200 --> 00:33:15,679
if you're digging very deep on the omg

854
00:33:15,679 --> 00:33:18,399
servers you will find a

855
00:33:18,399 --> 00:33:19,600
sysml

856
00:33:19,600 --> 00:33:24,320
v 1.3 oslc binding from axel i guess i

857
00:33:24,320 --> 00:33:26,559
remember finding something like that

858
00:33:26,559 --> 00:33:28,559
from from you

859
00:33:28,559 --> 00:33:29,279
it's

860
00:33:29,279 --> 00:33:31,919
years ago

861
00:33:32,799 --> 00:33:34,720
i don't know i it doesn't mean you're

862
00:33:34,720 --> 00:33:35,679
better

863
00:33:35,679 --> 00:33:39,640
i i will look it up

864
00:33:44,960 --> 00:33:46,880
variations of xmi

865
00:33:46,880 --> 00:33:49,360
and it was a pain and

866
00:33:49,360 --> 00:33:52,000
i i really hope that

867
00:33:52,000 --> 00:33:52,799
this

868
00:33:52,799 --> 00:33:54,559
these problems can

869
00:33:54,559 --> 00:33:57,039
sting the things

870
00:33:59,760 --> 00:34:03,519
yeah i remember this this is

871
00:34:03,519 --> 00:34:07,279
also i see stuff somewhere yeah

872
00:34:07,919 --> 00:34:09,760
maybe you're thinking of the oslc for

873
00:34:09,760 --> 00:34:11,679
mbsc working group

874
00:34:11,679 --> 00:34:13,440
it was yeah maybe

875
00:34:13,440 --> 00:34:14,599
in

876
00:34:14,599 --> 00:34:20,960
2013 or 1415 yeah yeah 2013 it was

877
00:34:22,480 --> 00:34:23,599
so

878
00:34:23,599 --> 00:34:26,320
that's where we converted the

879
00:34:26,320 --> 00:34:28,079
system l standard was it which is

880
00:34:28,079 --> 00:34:29,199
defined

881
00:34:29,199 --> 00:34:30,960
um

882
00:34:30,960 --> 00:34:32,000
uh

883
00:34:32,000 --> 00:34:33,119
you know

884
00:34:33,119 --> 00:34:35,119
well in xmi

885
00:34:35,119 --> 00:34:36,800
and the whole meta model is the finding

886
00:34:36,800 --> 00:34:39,599
xmi and we converted that into

887
00:34:39,599 --> 00:34:40,960
an equivalent

888
00:34:40,960 --> 00:34:43,199
rdf vocabulary

889
00:34:43,199 --> 00:34:44,079
um

890
00:34:44,079 --> 00:34:46,480
so it's it's very easy to take existing

891
00:34:46,480 --> 00:34:47,599
standards

892
00:34:47,599 --> 00:34:50,639
and make them web compatible if you want

893
00:34:50,639 --> 00:34:52,879
to say

894
00:34:52,960 --> 00:34:55,040
and

895
00:34:55,040 --> 00:34:58,560
unfortunately you know the the

896
00:34:58,560 --> 00:35:00,000
i don't think that there was enough

897
00:35:00,000 --> 00:35:03,440
traction to continue these efforts

898
00:35:03,440 --> 00:35:04,960
maybe you were a little bit ahead of

899
00:35:04,960 --> 00:35:07,440
time yeah

900
00:35:07,440 --> 00:35:10,880
certainly certainly yeah yeah

901
00:35:11,520 --> 00:35:14,640
okay so coming back to the topic

902
00:35:14,640 --> 00:35:16,800
maybe more interesting for our listeners

903
00:35:16,800 --> 00:35:20,720
instead of omg arc archaeology

904
00:35:20,720 --> 00:35:23,280
what's what's the the english word for

905
00:35:23,280 --> 00:35:25,200
is um

906
00:35:25,200 --> 00:35:26,880
maybe it sounded interesting for for

907
00:35:26,880 --> 00:35:29,119
somebody and he would like to play

908
00:35:29,119 --> 00:35:31,520
around with oslc so so what's a good

909
00:35:31,520 --> 00:35:33,359
place to start

910
00:35:33,359 --> 00:35:37,040
oh my god good luck um

911
00:35:37,520 --> 00:35:39,680
i'll say pokemon star

912
00:35:39,680 --> 00:35:42,240
so obviously you should check out

913
00:35:42,240 --> 00:35:43,680
some videos

914
00:35:43,680 --> 00:35:47,359
some articles some primer articles

915
00:35:47,359 --> 00:35:48,800
then

916
00:35:48,800 --> 00:35:50,160
you should

917
00:35:50,160 --> 00:35:53,280
look at some open source solutions

918
00:35:53,280 --> 00:35:55,839
uh there is a slack workspace

919
00:35:55,839 --> 00:35:58,640
uh where you can ask questions there's

920
00:35:58,640 --> 00:36:01,040
also a forum okay where you can ask

921
00:36:01,040 --> 00:36:02,240
questions

922
00:36:02,240 --> 00:36:03,440
um

923
00:36:03,440 --> 00:36:05,680
i think that

924
00:36:05,680 --> 00:36:07,839
many users who actually have questions

925
00:36:07,839 --> 00:36:08,640
about

926
00:36:08,640 --> 00:36:10,720
the need to use these oslc apis are

927
00:36:10,720 --> 00:36:13,520
actually using the oslt apis of ibm

928
00:36:13,520 --> 00:36:15,839
and and they they use the jazz form for

929
00:36:15,839 --> 00:36:17,440
these questions

930
00:36:17,440 --> 00:36:20,000
so um

931
00:36:20,000 --> 00:36:23,040
when it's purely about oslc yeah that's

932
00:36:23,040 --> 00:36:25,280
then it's it's useful to use the slack

933
00:36:25,280 --> 00:36:29,280
workspace of osmt or the forum

934
00:36:29,280 --> 00:36:31,119
and are there any open source tools

935
00:36:31,119 --> 00:36:33,599
using alsoc so two different kind of

936
00:36:33,599 --> 00:36:35,280
engineering tools like a requirement

937
00:36:35,280 --> 00:36:37,440
tool and then systems modeling tool or

938
00:36:37,440 --> 00:36:39,119
simulation tool or so

939
00:36:39,119 --> 00:36:41,440
so there are quite a few implementations

940
00:36:41,440 --> 00:36:43,760
yes that are open source

941
00:36:43,760 --> 00:36:45,599
um

942
00:36:45,599 --> 00:36:47,839
and so i would look at eclipse neo

943
00:36:47,839 --> 00:36:50,720
as the internet github there's an oslc

944
00:36:50,720 --> 00:36:52,480
project on github and there's eclipse

945
00:36:52,480 --> 00:36:53,440
video

946
00:36:53,440 --> 00:36:56,160
now keep in mind that any

947
00:36:56,160 --> 00:36:57,920
oslc

948
00:36:57,920 --> 00:37:00,480
api for a specific tool it needs to be

949
00:37:00,480 --> 00:37:02,720
maintained in order to to stay up to

950
00:37:02,720 --> 00:37:04,160
date because

951
00:37:04,160 --> 00:37:07,119
the tools have a native interface that

952
00:37:07,119 --> 00:37:08,880
changes over time

953
00:37:08,880 --> 00:37:10,160
and

954
00:37:10,160 --> 00:37:11,760
even the whole

955
00:37:11,760 --> 00:37:14,880
the many libraries that oslt apis use

956
00:37:14,880 --> 00:37:16,720
evolve over time so

957
00:37:16,720 --> 00:37:18,880
um you you will find quite a few open

958
00:37:18,880 --> 00:37:20,160
source solutions that are just

959
00:37:20,160 --> 00:37:23,119
completely outdated that you cannot even

960
00:37:23,119 --> 00:37:25,920
compile okay it's just because

961
00:37:25,920 --> 00:37:28,000
um

962
00:37:28,000 --> 00:37:30,400
nobody is maintaining them right now

963
00:37:30,400 --> 00:37:31,119
so

964
00:37:31,119 --> 00:37:33,200
um

965
00:37:33,200 --> 00:37:34,160
but

966
00:37:34,160 --> 00:37:36,640
you can still i think

967
00:37:36,640 --> 00:37:38,320
see examples of how to implement these

968
00:37:38,320 --> 00:37:40,400
oslt apis in java

969
00:37:40,400 --> 00:37:42,240
and with a few questions you can

970
00:37:42,240 --> 00:37:45,040
certainly update them and run them on

971
00:37:45,040 --> 00:37:46,720
your machine

972
00:37:46,720 --> 00:37:48,880
there's also if you prefer python to

973
00:37:48,880 --> 00:37:52,079
java there's the pi oslc

974
00:37:52,079 --> 00:37:53,359
project

975
00:37:53,359 --> 00:37:55,920
which i think

976
00:37:55,920 --> 00:37:58,400
is it takes a different take on oslt

977
00:37:58,400 --> 00:38:00,000
because

978
00:38:00,000 --> 00:38:03,280
it assumes that

979
00:38:03,359 --> 00:38:05,520
you don't want to modify anything of

980
00:38:05,520 --> 00:38:07,280
your of your application onto which you

981
00:38:07,280 --> 00:38:09,760
want to add this oslt wrapper

982
00:38:09,760 --> 00:38:12,800
and so it explains how you can

983
00:38:12,800 --> 00:38:15,119
do this oslc extension in a more

984
00:38:15,119 --> 00:38:17,599
seamless way

985
00:38:17,599 --> 00:38:19,040
and i think that's the right approach in

986
00:38:19,040 --> 00:38:20,800
the long term also

987
00:38:20,800 --> 00:38:22,640
um

988
00:38:22,640 --> 00:38:25,520
and what else um

989
00:38:25,520 --> 00:38:27,839
yeah yeah i hope i answered your

990
00:38:27,839 --> 00:38:31,400
question um

991
00:38:32,560 --> 00:38:34,560
you won't find perfect documentation

992
00:38:34,560 --> 00:38:36,079
that's the problem

993
00:38:36,079 --> 00:38:37,599
so you really need to be a bit more

994
00:38:37,599 --> 00:38:40,079
proactive ask questions if you're stuck

995
00:38:40,079 --> 00:38:42,240
you will probably get me stuck

996
00:38:42,240 --> 00:38:43,280
and

997
00:38:43,280 --> 00:38:45,119
there's just right now not enough

998
00:38:45,119 --> 00:38:47,359
persons in the oslt community to to

999
00:38:47,359 --> 00:38:49,599
create that high quality

1000
00:38:49,599 --> 00:38:52,000
uh level documentation that that helps

1001
00:38:52,000 --> 00:38:55,119
people get into the topic uh easier

1002
00:38:55,119 --> 00:38:57,680
and faster

1003
00:38:57,680 --> 00:39:00,400
yeah but this was exactly uh

1004
00:39:00,400 --> 00:39:02,880
one thing why my employer contact

1005
00:39:02,880 --> 00:39:05,839
software we asked ourselves why is there

1006
00:39:05,839 --> 00:39:07,760
no python implementation why is there no

1007
00:39:07,760 --> 00:39:09,760
python python sdk

1008
00:39:09,760 --> 00:39:13,040
and that's where we when we went to axel

1009
00:39:13,040 --> 00:39:15,760
and we are developing it

1010
00:39:15,760 --> 00:39:16,720
in

1011
00:39:16,720 --> 00:39:19,520
in common we are sponsoring all the work

1012
00:39:19,520 --> 00:39:21,200
and we will

1013
00:39:21,200 --> 00:39:24,800
yeah truly publish it uh open source

1014
00:39:24,800 --> 00:39:26,720
because

1015
00:39:26,720 --> 00:39:29,599
it is

1016
00:39:36,640 --> 00:39:39,520
reminds me of jupiter lab so can i use

1017
00:39:39,520 --> 00:39:40,480
this

1018
00:39:40,480 --> 00:39:42,720
pi over olc

1019
00:39:42,720 --> 00:39:44,640
with jupiter lab and can easily play

1020
00:39:44,640 --> 00:39:46,400
around with it

1021
00:39:46,400 --> 00:39:48,160
i don't know um

1022
00:39:48,160 --> 00:39:50,720
the thing is that you

1023
00:39:50,720 --> 00:39:54,400
know slc api is is not you know

1024
00:39:54,400 --> 00:39:56,960
some algorithm to create plots where you

1025
00:39:56,960 --> 00:39:59,200
know that's the more typical application

1026
00:39:59,200 --> 00:40:02,000
to use jupiter notebooks

1027
00:40:02,000 --> 00:40:03,119
so

1028
00:40:03,119 --> 00:40:06,400
typically the api code is is written in

1029
00:40:06,400 --> 00:40:08,319
a in an ide

1030
00:40:08,319 --> 00:40:11,040
and you want to yeah

1031
00:40:11,040 --> 00:40:12,800
you need a server you need to deploy it

1032
00:40:12,800 --> 00:40:14,480
on your server like quite a few things

1033
00:40:14,480 --> 00:40:16,720
involved so it's not

1034
00:40:16,720 --> 00:40:20,480
your simple application that you know is

1035
00:40:20,480 --> 00:40:21,599
runs

1036
00:40:21,599 --> 00:40:23,920
autonomous or in isolation in your

1037
00:40:23,920 --> 00:40:26,079
notebook

1038
00:40:26,079 --> 00:40:29,040
yeah but i could imagine that

1039
00:40:29,040 --> 00:40:32,160
taking pi oslc as a basis

1040
00:40:32,160 --> 00:40:34,480
it should be able or someone should be

1041
00:40:34,480 --> 00:40:38,160
able to write some kind of plugin for uh

1042
00:40:38,160 --> 00:40:40,000
for jupyter notebook

1043
00:40:40,000 --> 00:40:42,640
yeah to enable

1044
00:40:42,640 --> 00:40:45,280
yeah let's say a notebook to to import

1045
00:40:45,280 --> 00:40:46,400
requirements

1046
00:40:46,400 --> 00:40:48,400
or something like that

1047
00:40:48,400 --> 00:40:50,880
absolutely um

1048
00:40:50,880 --> 00:40:53,599
in general i think many organizations

1049
00:40:53,599 --> 00:40:56,000
would like to be able to add a tag in

1050
00:40:56,000 --> 00:40:57,599
the source code

1051
00:40:57,599 --> 00:40:59,520
so that

1052
00:40:59,520 --> 00:41:02,640
somebody reviewing that tag can actually

1053
00:41:02,640 --> 00:41:04,800
click on the requirement

1054
00:41:04,800 --> 00:41:06,560
that actually the source code tries to

1055
00:41:06,560 --> 00:41:09,599
satisfy it so there is and

1056
00:41:09,599 --> 00:41:12,640
whether it's java code or python code

1057
00:41:12,640 --> 00:41:13,520
um

1058
00:41:13,520 --> 00:41:15,520
that connectivity between source code at

1059
00:41:15,520 --> 00:41:16,480
a very

1060
00:41:16,480 --> 00:41:18,640
detailed level in a specific line of

1061
00:41:18,640 --> 00:41:20,800
code with a requirement

1062
00:41:20,800 --> 00:41:25,440
is something that i think is very useful

1063
00:41:28,079 --> 00:41:30,960
okay so

1064
00:41:31,280 --> 00:41:33,520
maybe if people are

1065
00:41:33,520 --> 00:41:36,079
still interested in oslc with all its

1066
00:41:36,079 --> 00:41:37,839
its complications

1067
00:41:37,839 --> 00:41:38,880
um

1068
00:41:38,880 --> 00:41:39,900
i heard you are

1069
00:41:39,900 --> 00:41:41,119
[Music]

1070
00:41:41,119 --> 00:41:44,960
also organizing a conference about oslc

1071
00:41:44,960 --> 00:41:47,040
each year i guess

1072
00:41:47,040 --> 00:41:48,880
can you tell us about it

1073
00:41:48,880 --> 00:41:49,599
so

1074
00:41:49,599 --> 00:41:53,280
we had three editions of the oslt fest

1075
00:41:53,280 --> 00:41:56,079
the first one in 2018 the second one in

1076
00:41:56,079 --> 00:41:57,599
2020

1077
00:41:57,599 --> 00:42:00,560
and then the last one

1078
00:42:00,560 --> 00:42:03,040
last year at the end of last year

1079
00:42:03,040 --> 00:42:04,720
and i think it's the

1080
00:42:04,720 --> 00:42:06,560
great way to see who is doing what with

1081
00:42:06,560 --> 00:42:09,359
oslc you will see many demonstrations of

1082
00:42:09,359 --> 00:42:10,480
vendors

1083
00:42:10,480 --> 00:42:11,920
and we are seeing

1084
00:42:11,920 --> 00:42:14,240
over the years more vendors doing stuff

1085
00:42:14,240 --> 00:42:15,680
with oslc

1086
00:42:15,680 --> 00:42:18,480
discovering oslc and gradually

1087
00:42:18,480 --> 00:42:21,839
supporting more aspects of oslc so

1088
00:42:21,839 --> 00:42:24,079
um

1089
00:42:24,160 --> 00:42:25,599
if if you want to

1090
00:42:25,599 --> 00:42:28,319
get an idea yeah tip your toe into this

1091
00:42:28,319 --> 00:42:31,680
oslc world i really recommend checking

1092
00:42:31,680 --> 00:42:34,319
out the the oslc fest

1093
00:42:34,319 --> 00:42:36,800
videos that are available online

1094
00:42:36,800 --> 00:42:38,720
either on youtube i think they're all in

1095
00:42:38,720 --> 00:42:39,839
youtube yeah

1096
00:42:39,839 --> 00:42:41,680
yeah yeah we can link them

1097
00:42:41,680 --> 00:42:43,760
under the video

1098
00:42:43,760 --> 00:42:46,800
and will there be a conference this year

1099
00:42:46,800 --> 00:42:49,200
i think so yes um

1100
00:42:49,200 --> 00:42:52,319
i need to check with my co-organizers uh

1101
00:42:52,319 --> 00:42:54,319
that we

1102
00:42:54,319 --> 00:42:56,319
i think so probably in november of this

1103
00:42:56,319 --> 00:42:57,920
year yeah um

1104
00:42:57,920 --> 00:42:59,440
as you can see we're not perfectly

1105
00:42:59,440 --> 00:43:00,800
organized

1106
00:43:00,800 --> 00:43:02,560
we're not like the omg where we know

1107
00:43:02,560 --> 00:43:05,200
exactly what we're doing but um

1108
00:43:05,200 --> 00:43:08,400
uh you know people are welcome to

1109
00:43:08,400 --> 00:43:10,480
to help obviously with the organization

1110
00:43:10,480 --> 00:43:13,200
of that uh event

1111
00:43:13,200 --> 00:43:14,720
and

1112
00:43:14,720 --> 00:43:16,240
we we

1113
00:43:16,240 --> 00:43:18,800
when we um released the call for for

1114
00:43:18,800 --> 00:43:21,200
presentations we received many

1115
00:43:21,200 --> 00:43:23,440
uh submissions and we even had to reject

1116
00:43:23,440 --> 00:43:26,079
some which we can then accept probably

1117
00:43:26,079 --> 00:43:28,079
for the next uh event

1118
00:43:28,079 --> 00:43:29,599
so um

1119
00:43:29,599 --> 00:43:31,520
yeah i i'm very optimistic there will be

1120
00:43:31,520 --> 00:43:34,560
one this year and we encourage

1121
00:43:34,560 --> 00:43:36,400
the early adopters that are doing

1122
00:43:36,400 --> 00:43:38,720
something with oslc to

1123
00:43:38,720 --> 00:43:40,400
come out of their

1124
00:43:40,400 --> 00:43:42,240
bubble and share it with the world

1125
00:43:42,240 --> 00:43:44,079
because there are many companies i think

1126
00:43:44,079 --> 00:43:46,400
who are doing stuff with oslc but not

1127
00:43:46,400 --> 00:43:47,200
yet

1128
00:43:47,200 --> 00:43:49,680
publicly sharing it out of maybe fear

1129
00:43:49,680 --> 00:43:52,319
that it's not yet

1130
00:43:52,319 --> 00:43:55,200
mature enough but i think it's it's

1131
00:43:55,200 --> 00:43:57,520
interesting for other engineers to see

1132
00:43:57,520 --> 00:44:00,079
the the thought process of why

1133
00:44:00,079 --> 00:44:01,920
an organization is

1134
00:44:01,920 --> 00:44:04,400
uh starting to adopt oslc how they're

1135
00:44:04,400 --> 00:44:05,760
they're doing it

1136
00:44:05,760 --> 00:44:07,760
and and

1137
00:44:07,760 --> 00:44:10,720
you know the oslc fest is

1138
00:44:10,720 --> 00:44:12,560
intended to create

1139
00:44:12,560 --> 00:44:15,200
connections among among persons

1140
00:44:15,200 --> 00:44:17,599
interested in oslc and and that we can

1141
00:44:17,599 --> 00:44:18,960
benefit from each other from the

1142
00:44:18,960 --> 00:44:22,079
experiences of each other

1143
00:44:22,079 --> 00:44:22,960
okay

1144
00:44:22,960 --> 00:44:25,520
it is always at the same location or

1145
00:44:25,520 --> 00:44:27,119
in the world

1146
00:44:27,119 --> 00:44:29,680
europe or in the u.s so the first time

1147
00:44:29,680 --> 00:44:32,480
it was a normal in-person conference in

1148
00:44:32,480 --> 00:44:34,079
sweden

1149
00:44:34,079 --> 00:44:37,680
at kth and the next two editions were

1150
00:44:37,680 --> 00:44:42,000
online yeah so yeah exactly

1151
00:44:42,000 --> 00:44:43,440
and i have a feeling we will keep it

1152
00:44:43,440 --> 00:44:45,440
online because

1153
00:44:45,440 --> 00:44:49,119
i don't know it did work quite well

1154
00:44:49,280 --> 00:44:50,960
okay

1155
00:44:50,960 --> 00:44:53,520
so yeah baby one final question uh an

1156
00:44:53,520 --> 00:44:55,599
outlook so what are the future plans of

1157
00:44:55,599 --> 00:44:58,000
ocrc

1158
00:44:58,000 --> 00:45:00,160
so

1159
00:45:00,160 --> 00:45:02,400
impossible for me to predict of course

1160
00:45:02,400 --> 00:45:04,960
but

1161
00:45:05,119 --> 00:45:06,800
we will see more

1162
00:45:06,800 --> 00:45:11,920
integrations with ibm elm based on oslc

1163
00:45:12,000 --> 00:45:14,720
then i think that

1164
00:45:14,720 --> 00:45:16,720
at some points

1165
00:45:16,720 --> 00:45:19,440
we will also see the adoption of oslc in

1166
00:45:19,440 --> 00:45:20,880
the within

1167
00:45:20,880 --> 00:45:23,599
the engineering domain but independently

1168
00:45:23,599 --> 00:45:25,440
of ibm tools

1169
00:45:25,440 --> 00:45:26,319
um

1170
00:45:26,319 --> 00:45:28,960
and i think the in the middle or long

1171
00:45:28,960 --> 00:45:29,920
term

1172
00:45:29,920 --> 00:45:31,839
we will see the adoption of oslt in

1173
00:45:31,839 --> 00:45:33,280
other industries

1174
00:45:33,280 --> 00:45:35,520
in the machine learning or healthcare

1175
00:45:35,520 --> 00:45:36,800
industry

1176
00:45:36,800 --> 00:45:38,160
and

1177
00:45:38,160 --> 00:45:40,960
but for this to happen you know the

1178
00:45:40,960 --> 00:45:43,520
documentation i would also say the tools

1179
00:45:43,520 --> 00:45:45,119
around oslc

1180
00:45:45,119 --> 00:45:47,599
need to become more accessible

1181
00:45:47,599 --> 00:45:50,560
more commercialized more mature

1182
00:45:50,560 --> 00:45:52,000
and

1183
00:45:52,000 --> 00:45:53,839
so you know

1184
00:45:53,839 --> 00:45:58,079
oslc is still mainly used

1185
00:45:58,079 --> 00:45:59,520
by innovators and

1186
00:45:59,520 --> 00:46:01,280
and early adopters

1187
00:46:01,280 --> 00:46:04,800
and i think we will slowly see yeah this

1188
00:46:04,800 --> 00:46:05,680
um

1189
00:46:05,680 --> 00:46:08,319
a growing maturity and it's possible

1190
00:46:08,319 --> 00:46:10,400
that

1191
00:46:10,400 --> 00:46:12,000
if oslc

1192
00:46:12,000 --> 00:46:14,560
gets this

1193
00:46:14,560 --> 00:46:16,000
reaches this adoption outside of

1194
00:46:16,000 --> 00:46:17,839
engineering it might look also a bit

1195
00:46:17,839 --> 00:46:18,880
different

1196
00:46:18,880 --> 00:46:21,760
because um

1197
00:46:21,760 --> 00:46:24,720
some ideas of oslc could be realized

1198
00:46:24,720 --> 00:46:26,319
in a slightly different way maybe

1199
00:46:26,319 --> 00:46:30,960
without relying necessarily on rdf

1200
00:46:30,960 --> 00:46:32,880
still using ref to define the

1201
00:46:32,880 --> 00:46:34,640
standardized concepts

1202
00:46:34,640 --> 00:46:36,720
but maybe not

1203
00:46:36,720 --> 00:46:39,760
for each api resource

1204
00:46:39,760 --> 00:46:40,720
and

1205
00:46:40,720 --> 00:46:42,960
to give maybe an idea of what this could

1206
00:46:42,960 --> 00:46:45,359
look like so

1207
00:46:45,359 --> 00:46:47,760
in order to manage distributed

1208
00:46:47,760 --> 00:46:49,440
microservices

1209
00:46:49,440 --> 00:46:51,440
we have seen tools

1210
00:46:51,440 --> 00:46:53,760
that have been released to manage these

1211
00:46:53,760 --> 00:46:56,400
service mesh architectures so these are

1212
00:46:56,400 --> 00:46:58,560
tools to manage the service to service

1213
00:46:58,560 --> 00:47:00,400
communication

1214
00:47:00,400 --> 00:47:02,319
when you have a bunch of different apis

1215
00:47:02,319 --> 00:47:03,760
and you want to manage how they

1216
00:47:03,760 --> 00:47:05,680
communicate with each other

1217
00:47:05,680 --> 00:47:08,160
and inspired by what we're seeing

1218
00:47:08,160 --> 00:47:09,760
to manage the communication between

1219
00:47:09,760 --> 00:47:11,200
services

1220
00:47:11,200 --> 00:47:12,319
we

1221
00:47:12,319 --> 00:47:14,720
i can imagine very similar tools in a

1222
00:47:14,720 --> 00:47:16,800
very similar architecture to manage the

1223
00:47:16,800 --> 00:47:18,160
linking

1224
00:47:18,160 --> 00:47:20,559
of of api resources

1225
00:47:20,559 --> 00:47:21,680
um

1226
00:47:21,680 --> 00:47:22,559
and

1227
00:47:22,559 --> 00:47:24,160
i don't know what it would what it would

1228
00:47:24,160 --> 00:47:26,800
be called um i've noticed that the

1229
00:47:26,800 --> 00:47:29,520
keyword data mesh is already taken and

1230
00:47:29,520 --> 00:47:31,440
it's it describes principles that are

1231
00:47:31,440 --> 00:47:32,240
high

1232
00:47:32,240 --> 00:47:33,920
at a high level of abstraction so it's

1233
00:47:33,920 --> 00:47:36,559
not very clear how you you implement

1234
00:47:36,559 --> 00:47:39,440
these data mesh principles

1235
00:47:39,440 --> 00:47:40,640
um

1236
00:47:40,640 --> 00:47:43,040
so so

1237
00:47:43,040 --> 00:47:45,119
it's i don't know where the journey will

1238
00:47:45,119 --> 00:47:48,000
lead to but i'm convinced that linking

1239
00:47:48,000 --> 00:47:48,960
data

1240
00:47:48,960 --> 00:47:50,079
will

1241
00:47:50,079 --> 00:47:51,040
become

1242
00:47:51,040 --> 00:47:52,559
more and more

1243
00:47:52,559 --> 00:47:54,480
prevalent it's

1244
00:47:54,480 --> 00:47:56,319
it's the only way you can

1245
00:47:56,319 --> 00:47:58,480
uh understand the data if you understand

1246
00:47:58,480 --> 00:48:00,160
its context if you can discover its

1247
00:48:00,160 --> 00:48:03,280
context and in a complicated world that

1248
00:48:03,280 --> 00:48:07,520
becomes uh increasingly important

1249
00:48:07,520 --> 00:48:09,839
right

1250
00:48:09,920 --> 00:48:11,280
yeah so

1251
00:48:11,280 --> 00:48:13,839
thank you axel for your time so

1252
00:48:13,839 --> 00:48:16,480
if anybody is interested to integrate

1253
00:48:16,480 --> 00:48:19,359
his tools with oslc or whatever

1254
00:48:19,359 --> 00:48:22,160
just contact axel it's it's his everyday

1255
00:48:22,160 --> 00:48:24,240
job to to create

1256
00:48:24,240 --> 00:48:26,079
oslc

1257
00:48:26,079 --> 00:48:28,079
integrations

1258
00:48:28,079 --> 00:48:29,119
um

1259
00:48:29,119 --> 00:48:30,960
yeah it was very interesting longer than

1260
00:48:30,960 --> 00:48:32,800
i expected

1261
00:48:32,800 --> 00:48:36,720
and we we skipped many many of uh

1262
00:48:36,720 --> 00:48:38,720
interesting topics on it yeah we had

1263
00:48:38,720 --> 00:48:41,040
many more

1264
00:48:41,040 --> 00:48:45,440
okay but tim what's next on the agenda

1265
00:48:45,440 --> 00:48:48,640
well yeah so the next topic you know the

1266
00:48:48,640 --> 00:48:50,240
next date is

1267
00:48:50,240 --> 00:48:52,400
finally set but will be probably

1268
00:48:52,400 --> 00:48:54,800
something about the small v2

1269
00:48:54,800 --> 00:48:57,040
this is on the final run

1270
00:48:57,040 --> 00:48:58,880
last week at the omg meeting in

1271
00:48:58,880 --> 00:49:01,280
washington we decided that we will

1272
00:49:01,280 --> 00:49:03,040
submit this will be too definitely this

1273
00:49:03,040 --> 00:49:05,440
year end of this year

1274
00:49:05,440 --> 00:49:07,440
and there's many interesting sub-topics

1275
00:49:07,440 --> 00:49:09,040
the the language itself not the features

1276
00:49:09,040 --> 00:49:11,680
of language the api with oslc

1277
00:49:11,680 --> 00:49:14,640
um would be another interesting topic

1278
00:49:14,640 --> 00:49:17,520
or uh the transformation from system lv1

1279
00:49:17,520 --> 00:49:20,000
to the smell v2 uh which will also be

1280
00:49:20,000 --> 00:49:23,200
part of the system ob2 standard so

1281
00:49:23,200 --> 00:49:25,280
um yeah we will select one of those

1282
00:49:25,280 --> 00:49:26,559
topics i guess

1283
00:49:26,559 --> 00:49:27,839
and then we

1284
00:49:27,839 --> 00:49:29,920
send a notice in our social media

1285
00:49:29,920 --> 00:49:32,319
channels and so

1286
00:49:32,319 --> 00:49:34,640
okay great yeah

1287
00:49:34,640 --> 00:49:37,040
and well the date is not finally set but

1288
00:49:37,040 --> 00:49:40,559
around about in a month i guess

1289
00:49:40,559 --> 00:49:42,319
typical frequents

1290
00:49:42,319 --> 00:49:45,200
one podcast per month

1291
00:49:45,200 --> 00:49:48,160
yeah and then well

1292
00:49:48,160 --> 00:49:50,000
do not forget

1293
00:49:50,000 --> 00:49:51,119
trust us

1294
00:49:51,119 --> 00:49:54,000
we are systems engineers

1295
00:49:54,000 --> 00:49:56,880
bye-bye goodbye

